     1                                     section .data
     2                                  
     3 00000000 456E74657220613A0A      EntrMsga db "Enter a:",10
     4                                  lenEntra equ $-EntrMsga
     5                                  
     6 00000009 456E74657220623A0A      EntrMsgb db "Enter b:",10
     7                                  lenEntrb equ $-EntrMsgb
     8                                  
     9 00000012 456E74657220713A0A      EntrMsgq db "Enter q:",10
    10                                  lenEntrq equ $-EntrMsgq
    11                                  
    12 0000001B 416E737765723A0A        ExitMsg db "Answer:",10
    13                                  lenExit equ $-ExitMsg
    14                                  
    15                                      section .bss
    16                                  
    17 00000000 <res Ah>                InBuf   resb    10 
    18                                  lenIn   equ     $-InBuf
    19 0000000A <res Ah>                OutBuf  resb    10
    20                                  lenOut  equ     $-OutBuf 
    21                                  
    22 00000014 ????                    X       resw    1
    23                                  
    24 00000016 ????                    A       resw    1
    25 00000018 ????                    B       resw    1
    26 0000001A ????                    Q       resw    1
    27                                  
    28                                      section .text 
    29                                      global _start
    30                                  _start:
    31                                  
    32 00000000 B801000000                  mov rax, 1
    33 00000005 BF01000000                  mov rdi, 1
    34 0000000A 48BE-                       mov rsi, EntrMsga 
    34 0000000C [0000000000000000] 
    35 00000014 BA09000000                  mov rdx, lenEntra 
    36 00000019 0F05                        syscall
    37                                  
    38 0000001B B800000000                  mov rax, 0
    39 00000020 BF00000000                  mov rdi, 0
    40 00000025 48BE-                       mov rsi, InBuf
    40 00000027 [0000000000000000] 
    41 0000002F BA0A000000                  mov rdx, lenIn
    42 00000034 0F05                        syscall
    43 00000036 BE[00000000]                mov     esi,InBuf  
    44 0000003B E8E7010000                  call    StrToInt64
    45 00000040 83FB00                      cmp     EBX, 0   
    46 00000043 0F8528020000                jne     StrToInt64.Error 
    47 00000049 66890425[16000000]          mov     [A],ax  
    48                                  
    49 00000051 B801000000                  mov rax, 1
    50 00000056 BF01000000                  mov rdi, 1
    51 0000005B 48BE-                       mov rsi, EntrMsgb 
    51 0000005D [0900000000000000] 
    52 00000065 BA09000000                  mov rdx, lenEntrb 
    53 0000006A 0F05                        syscall
    54                                  
    55 0000006C B800000000                  mov rax, 0
    56 00000071 BF00000000                  mov rdi, 0
    57 00000076 48BE-                       mov rsi, InBuf
    57 00000078 [0000000000000000] 
    58 00000080 BA0A000000                  mov rdx, lenIn
    59 00000085 0F05                        syscall
    60 00000087 BE[00000000]                mov     esi,InBuf  
    61 0000008C E896010000                  call    StrToInt64
    62 00000091 83FB00                      cmp     EBX, 0   
    63 00000094 0F85D7010000                jne     StrToInt64.Error 
    64 0000009A 66890425[18000000]          mov     [B],ax  
    65                                  
    66 000000A2 B801000000                  mov rax, 1
    67 000000A7 BF01000000                  mov rdi, 1
    68 000000AC 48BE-                       mov rsi, EntrMsgq 
    68 000000AE [1200000000000000] 
    69 000000B6 BA09000000                  mov rdx, lenEntrq 
    70 000000BB 0F05                        syscall
    71                                  
    72 000000BD B800000000                  mov rax, 0
    73 000000C2 BF00000000                  mov rdi, 0
    74 000000C7 48BE-                       mov rsi, InBuf
    74 000000C9 [0000000000000000] 
    75 000000D1 BA0A000000                  mov rdx, lenIn
    76 000000D6 0F05                        syscall
    77 000000D8 BE[00000000]                mov     esi,InBuf  
    78 000000DD E845010000                  call    StrToInt64
    79 000000E2 83FB00                      cmp     EBX, 0   
    80 000000E5 0F8586010000                jne     StrToInt64.Error 
    81 000000EB 66890425[1A000000]          mov     [Q],ax      
    82                                    
    83                                  
    84 000000F3 668B1C25[16000000]          mov    BX,[A] 
    85 000000FB 662B1C25[18000000]          sub    BX,[B]
    86 00000103 6683FB00                    cmp    BX,0
    87 00000107 7E46                        jle    else
    88 00000109 668B1C25[16000000]          mov    BX,[A]
    89 00000111 6689D8                      mov    AX,BX
    90 00000114 B902000000                  mov    ECX,2
    91                                      loopmul:
    92 00000119 66F7EB                      imul   BX
    93 0000011C E2FB                        loop loopmul
    94 0000011E 6689C1                      mov    CX,AX
    95 00000121 6689D8                      mov    AX,BX
    96 00000124 66BB0200                    mov    BX,2
    97 00000128 66F7EB                      imul   BX
    98 0000012B 668B1C25[1A000000]          mov    BX,[Q]
    99 00000133 66F7EB                      imul   BX
   100 00000136 6629C1                      sub    CX,AX
   101 00000139 668B1C25[18000000]          mov    BX,[B]
   102 00000141 6689D8                      mov    AX,BX
   103 00000144 66F7EB                      imul   BX
   104 00000147 6601C1                      add    CX,AX
   105 0000014A 6689C8                      mov    AX,CX
   106 0000014D EB10                        jmp    end
   107                                      else:
   108 0000014F 6689D8                      mov    AX,BX
   109 00000152 66F7EB                      imul   BX
   110 00000155 66F7EB                      imul   BX
   111 00000158 66BBFEFF                    mov    BX,-2
   112 0000015C 66F7FB                      idiv   BX
   113                                      end:
   114 0000015F 66890425[14000000]          mov    [X],AX
   115                                  
   116                                  
   117 00000167 B801000000                  mov rax, 1; системная функция 1 (write)
   118 0000016C BF01000000                  mov rdi, 1; дескриптор файла stdout=1
   119 00000171 48BE-                       mov rsi, ExitMsg ; адрес выводимой строки
   119 00000173 [1B00000000000000] 
   120 0000017B BA08000000                  mov rdx, lenExit; длина строки
   121 00000180 0F05                        syscall
   122                                  
   123 00000182 BE[0A000000]                mov     esi, OutBuf  ; загрузка адреса буфера вывода 
   124 00000187 668B0425[14000000]          mov     ax, [X]      ; загрузка числа в регистр 
   125 0000018F 98                          cwde                 ; развертывание числа из ax в eax 
   126 00000190 E840000000                  call    IntToStr64
   127                                  
   128                                  
   129                                  
   130 00000195 BF01000000                  mov rdi, 1; дескриптор файла stdout=1
   131 0000019A 48BE-                       mov rsi, OutBuf ; адрес выводимой строки
   131 0000019C [0A00000000000000] 
   132 000001A4 BA0A000000                  mov rdx, lenOut ; длина строки
   133 000001A9 B801000000                  mov rax, 1; системная функция 1 (write)
   134                                      ; вызов системной функции
   135 000001AE 0F05                        syscall
   136                                      ; read
   137 000001B0 B800000000                  mov rax, 0; системная функция 0 (read)
   138 000001B5 BF00000000                  mov rdi, 0; дескриптор файла stdin=0
   139 000001BA 48BE-                       mov rsi, InBuf; адрес вводимой строки
   139 000001BC [0000000000000000] 
   140 000001C4 BA0A000000                  mov rdx, lenIn; длина строки
   141                                      ; вызов системной функции
   142 000001C9 0F05                        syscall
   143                                      ; exit
   144 000001CB B83C000000                  mov rax, 60; системная функция 60 (exit)
   145 000001D0 4831FF                      xor rdi, rdi; return code 0
   146 000001D3 0F05                        syscall
   147                                      ; вызов системной функции
   148                                  %include "../lib64.asm"
   149                              <1>          section .text     ; ������� ����
   150                              <1> IntToStr64: 
   151 000001D5 57                  <1>          push   rdi
   152 000001D6 53                  <1>          push   rbx
   153 000001D7 52                  <1>          push   rdx
   154 000001D8 51                  <1>          push   rcx
   155 000001D9 56                  <1> 		 push   rsi
   156 000001DA C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
   157 000001DD 83F800              <1>          cmp    eax,0
   158 000001E0 7D05                <1>          jge    .l1
   159 000001E2 F7D8                <1>          neg    eax
   160 000001E4 C6062D              <1>          mov    byte[rsi],'-'
   161 000001E7 C6461020            <1> .l1      mov    byte[rsi+16],32
   162 000001EB BF0F000000          <1>          mov    rdi,15
   163 000001F0 66BB0A00            <1>          mov    bx,10
   164 000001F4 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
   165 000001F6 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
   166 000001F9 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
   167 000001FC 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
   168 000001FF 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
   169                              <1>                        ; ���������� �������
   170 00000202 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
   171 00000206 75EC                <1>          jne    .again
   172 00000208 B910000000          <1>          mov    rcx, 16
   173 0000020D 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
   174 00000210 4889C8              <1> 		 mov    rax,rcx
   175 00000213 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
   176 00000216 48FFC6              <1>          inc    rsi    ; ���������� ����
   177 00000219 56                  <1> 		 push   rsi
   178 0000021A 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
   179 0000021E 5F                  <1> 		 pop    rdi
   180 0000021F F3A4                <1>          rep movsb
   181 00000221 5E                  <1>          pop    rsi  
   182 00000222 59                  <1>          pop    rcx
   183 00000223 5A                  <1>          pop    rdx
   184 00000224 5B                  <1>          pop    rbx
   185 00000225 5F                  <1>          pop    rdi
   186 00000226 C3                  <1>          ret
   187                              <1> StrToInt64:
   188 00000227 57                  <1>          push   rdi
   189 00000228 B739                <1>          mov    bh, '9'
   190 0000022A B330                <1>          mov    bl, '0'
   191 0000022C 56                  <1>          push   rsi     ; ��������� ����� �������� ������
   192 0000022D 803E2D              <1>          cmp    byte[rsi], '-'
   193 00000230 7503                <1>          jne    .prod
   194 00000232 48FFC6              <1>          inc    rsi     ; ���������� ����
   195 00000235 FC                  <1> .prod    cld
   196 00000236 6631FF              <1>          xor    di, di  ; �������� ������� �����
   197 00000239 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
   198 0000023A 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
   199 0000023C 741F                <1>          je     .Return
   200 0000023E 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
   201 00000240 722F                <1>          jb     .Error  ; "����" � ������
   202 00000242 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
   203 00000244 772B                <1>          ja     .Error  ; "����" � ������
   204 00000246 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
   205 00000248 6698                <1>          cbw            ; ��������� �� �����
   206 0000024A 6650                <1>          push   ax      ; ��������� � �����
   207 0000024C 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
   208 00000250 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
   209 00000253 665F                <1>          pop    di      ; � DI � ��������� �����
   210 00000255 6601F8              <1>          add    ax, di
   211 00000258 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
   212 0000025B EBDC                <1>          jmp    .cycle
   213 0000025D 5E                  <1> .Return: pop    rsi
   214 0000025E BB00000000          <1>          mov    rbx, 0
   215 00000263 803E2D              <1>          cmp    byte[rsi], '-'
   216 00000266 7503                <1>          jne    .J
   217 00000268 66F7DF              <1>          neg    di
   218 0000026B 6689F8              <1> .J       mov    ax, di
   219 0000026E 98                  <1>          cwde
   220 0000026F EB0B                <1>          jmp    .R
   221 00000271 5E                  <1> .Error:  pop    rsi
   222 00000272 B800000000          <1>          mov    rax, 0
   223 00000277 BB01000000          <1>          mov    rbx, 1
   224 0000027C 5F                  <1> .R       pop    rdi
   225 0000027D C3                  <1>          ret
