     1                                     section .data
     2                                  
     3 00000000 0A                      NewLine db 10
     4                                  
     5 00000001 456E746572206E756D-     EntrMsg db "Enter number (row #):",10
     5 0000000A 6265722028726F7720-
     5 00000013 23293A0A           
     6                                  lenEntr equ $-EntrMsg  
     7                                  
     8 00000017 416E737765723A0A        ExitMsg db "Answer:",10
     9                                  lenExit equ $-ExitMsg
    10                                  
    11                                  
    12                                  
    13                                      section .bss
    14                                  
    15 00000000 <res Ah>                InBuf   resb    10 
    16                                  lenIn   equ     $-InBuf
    17 0000000A <res 14h>               OutBuf  resb    20
    18                                  lenOut  equ     10
    19                                  
    20                                  
    21 0000001E <res 28h>               MAS     resw    20
    22 00000046 <res Ah>                RESM    resw    5
    23                                  
    24                                      section .text 
    25                                      global _start
    26                                  _start:
    27                                  
    28 00000000 BA00000000                  mov EDX,0
    29 00000005 BB00000000                  mov EBX,0
    30 0000000A B905000000                  mov ECX,5
    31                                      cycle:
    32 0000000F 51                          push RCX
    33 00000010 52                          push RDX
    34 00000011 80C231                      add DL,49
    35 00000014 881425[13000000]            mov [EntrMsg+18],DL
    36                                  
    37 0000001B B904000000                  mov ECX,4
    38                                      cycle7:
    39                                  
    40 00000020 B801000000                  mov rax, 1
    41 00000025 BF01000000                  mov rdi, 1
    42 0000002A 48BE-                       mov rsi, EntrMsg 
    42 0000002C [0100000000000000] 
    43 00000034 BA16000000                  mov rdx, lenEntr
    44 00000039 51                          push RCX
    45 0000003A 0F05                        syscall
    46 0000003C 59                          pop  RCX
    47                                  
    48                                  
    49 0000003D B800000000                  mov rax, 0
    50 00000042 BF00000000                  mov rdi, 0
    51 00000047 48BE-                       mov rsi, InBuf
    51 00000049 [0000000000000000] 
    52 00000051 BA0A000000                  mov rdx, lenIn
    53                                  
    54 00000056 51                          push RCX
    55 00000057 0F05                        syscall
    56 00000059 59                          pop  RCX
    57 0000005A 53                          push RBX
    58 0000005B BE[00000000]                mov     esi,InBuf  
    59 00000060 E863010000                  call    StrToInt64
    60 00000065 83FB00                      cmp     EBX, 0   
    61 00000068 0F85A4010000                jne     StrToInt64.Error 
    62 0000006E 5B                          pop  RBX  
    63 0000006F 666789841B-                 mov     [EBX*2+MAS],ax 
    63 00000074 [1E000000]         
    64 00000078 FFC3                        inc EBX
    65 0000007A E2A4                        loop cycle7
    66                                  
    67 0000007C 5A                          pop RDX
    68 0000007D 59                          pop RCX
    69 0000007E 48FFC2                      INC RDX
    70 00000081 E28C                        loop cycle
    71                                  
    72 00000083 BA00000000                  mov EDX,0
    73 00000088 BB00000000                  mov EBX,0
    74 0000008D B905000000                  mov ECX,5
    75                                      cycle3:
    76                                  
    77 00000092 51                          push RCX
    78 00000093 66B80000                    mov AX,0
    79 00000097 B904000000                  mov ECX,4
    80                                      cycle4:
    81 0000009C 666703841B-                 add AX,[EBX*2+MAS]
    81 000000A1 [1E000000]         
    82 000000A5 FFC3                        inc EBX
    83 000000A7 E2F3                        loop cycle4
    84 000000A9 6667898412-                 mov [EDX*2+RESM],AX
    84 000000AE [46000000]         
    85 000000B2 FFC2                        inc EDX
    86 000000B4 59                          pop RCX
    87 000000B5 E2DB                        loop cycle3
    88                                  
    89                                  
    90 000000B7 B801000000                  mov rax, 1; системная функция 1 (write)
    91 000000BC BF01000000                  mov rdi, 1; дескриптор файла stdout=1
    92 000000C1 48BE-                       mov rsi, ExitMsg ; адрес выводимой строки
    92 000000C3 [1700000000000000] 
    93 000000CB BA08000000                  mov rdx, lenExit; длина строки
    94 000000D0 0F05                        syscall
    95                                      
    96 000000D2 BA00000000                  mov EDX,0
    97 000000D7 BB00000000                  mov EBX,0
    98 000000DC B905000000                  mov ECX,5
    99                                      cycle2:
   100 000000E1 51                          push RCX
   101 000000E2 52                          push RDX
   102                                  
   103 000000E3 66B80000                    mov AX,0
   104 000000E7 66673B8412-                 cmp AX,[EDX*2+RESM]
   104 000000EC [46000000]         
   105 000000F0 7455                        je  deleted
   106                                  
   107                                  
   108 000000F2 B904000000                  mov ECX,4
   109                                      cycle10:
   110 000000F7 BE[0A000000]                mov     esi, OutBuf  ; загрузка адреса буфера вывода 
   111 000000FC 66678B841B-                 mov     ax, [EBX*2+MAS]      ; загрузка числа в регистр 
   111 00000101 [1E000000]         
   112 00000105 98                          cwde                 ; развертывание числа из ax в eax 
   113 00000106 E86B000000                  call    IntToStr64
   114                                  
   115 0000010B 4889C2                      mov rdx, rax; длина строки
   116 0000010E B801000000                  mov rax, 1; системная функция 1 (write)
   117 00000113 BF01000000                  mov rdi, 1; дескриптор файла stdout=1
   118 00000118 48BE-                       mov rsi, OutBuf ; адрес выводимой строки
   118 0000011A [0A00000000000000] 
   119 00000122 51                          push RCX
   120 00000123 0F05                        syscall
   121 00000125 59                          pop  RCX
   122                                  
   123 00000126 FFC3                        inc  EBX
   124 00000128 E2CD                        loop cycle10
   125 0000012A B801000000                  mov rax, 1; системная функция 1 (write)
   126 0000012F BF01000000                  mov rdi, 1; дескриптор файла stdout=1
   127 00000134 48BE-                       mov rsi, NewLine ; адрес выводимой строки
   127 00000136 [0000000000000000] 
   128 0000013E BA01000000                  mov rdx, 1; длина строки
   129 00000143 0F05                        syscall
   130 00000145 EB03                        jmp skip
   131                                      deleted:
   132 00000147 83C304                      add EBX,4
   133                                      skip:
   134                                  
   135 0000014A 5A                          pop  RDX    
   136 0000014B 59                          pop  RCX
   137 0000014C 48FFC2                      inc  RDX
   138 0000014F E290                        loop cycle2
   139                                  
   140                                  
   141                                     
   142                                      ; read
   143 00000151 B800000000                  mov rax, 0; системная функция 0 (read)
   144 00000156 BF00000000                  mov rdi, 0; дескриптор файла stdin=0
   145 0000015B 48BE-                       mov rsi, InBuf; адрес вводимой строки
   145 0000015D [0000000000000000] 
   146 00000165 BA0A000000                  mov rdx, lenIn; длина строки
   147                                      ; вызов системной функции
   148 0000016A 0F05                        syscall
   149                                      ; exit
   150 0000016C B83C000000                  mov rax, 60; системная функция 60 (exit)
   151 00000171 4831FF                      xor rdi, rdi; return code 0
   152 00000174 0F05                        syscall
   153                                      ; вызов системной функции
   154                                  %include "../lib64.asm"
   155                              <1>          section .text     ; ������� ����
   156                              <1> IntToStr64: 
   157 00000176 57                  <1>          push   rdi
   158 00000177 53                  <1>          push   rbx
   159 00000178 52                  <1>          push   rdx
   160 00000179 51                  <1>          push   rcx
   161 0000017A 56                  <1> 		 push   rsi
   162 0000017B C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
   163 0000017E 83F800              <1>          cmp    eax,0
   164 00000181 7D05                <1>          jge    .l1
   165 00000183 F7D8                <1>          neg    eax
   166 00000185 C6062D              <1>          mov    byte[rsi],'-'
   167 00000188 C6461020            <1> .l1      mov    byte[rsi+16],32
   168 0000018C BF0F000000          <1>          mov    rdi,15
   169 00000191 66BB0A00            <1>          mov    bx,10
   170 00000195 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
   171 00000197 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
   172 0000019A 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
   173 0000019D 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
   174 000001A0 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
   175                              <1>                        ; ���������� �������
   176 000001A3 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
   177 000001A7 75EC                <1>          jne    .again
   178 000001A9 B910000000          <1>          mov    rcx, 16
   179 000001AE 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
   180 000001B1 4889C8              <1> 		 mov    rax,rcx
   181 000001B4 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
   182 000001B7 48FFC6              <1>          inc    rsi    ; ���������� ����
   183 000001BA 56                  <1> 		 push   rsi
   184 000001BB 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
   185 000001BF 5F                  <1> 		 pop    rdi
   186 000001C0 F3A4                <1>          rep movsb
   187 000001C2 5E                  <1>          pop    rsi  
   188 000001C3 59                  <1>          pop    rcx
   189 000001C4 5A                  <1>          pop    rdx
   190 000001C5 5B                  <1>          pop    rbx
   191 000001C6 5F                  <1>          pop    rdi
   192 000001C7 C3                  <1>          ret
   193                              <1> StrToInt64:
   194 000001C8 57                  <1>          push   rdi
   195 000001C9 B739                <1>          mov    bh, '9'
   196 000001CB B330                <1>          mov    bl, '0'
   197 000001CD 56                  <1>          push   rsi     ; ��������� ����� �������� ������
   198 000001CE 803E2D              <1>          cmp    byte[rsi], '-'
   199 000001D1 7503                <1>          jne    .prod
   200 000001D3 48FFC6              <1>          inc    rsi     ; ���������� ����
   201 000001D6 FC                  <1> .prod    cld
   202 000001D7 6631FF              <1>          xor    di, di  ; �������� ������� �����
   203 000001DA AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
   204 000001DB 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
   205 000001DD 741F                <1>          je     .Return
   206 000001DF 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
   207 000001E1 722F                <1>          jb     .Error  ; "����" � ������
   208 000001E3 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
   209 000001E5 772B                <1>          ja     .Error  ; "����" � ������
   210 000001E7 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
   211 000001E9 6698                <1>          cbw            ; ��������� �� �����
   212 000001EB 6650                <1>          push   ax      ; ��������� � �����
   213 000001ED 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
   214 000001F1 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
   215 000001F4 665F                <1>          pop    di      ; � DI � ��������� �����
   216 000001F6 6601F8              <1>          add    ax, di
   217 000001F9 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
   218 000001FC EBDC                <1>          jmp    .cycle
   219 000001FE 5E                  <1> .Return: pop    rsi
   220 000001FF BB00000000          <1>          mov    rbx, 0
   221 00000204 803E2D              <1>          cmp    byte[rsi], '-'
   222 00000207 7503                <1>          jne    .J
   223 00000209 66F7DF              <1>          neg    di
   224 0000020C 6689F8              <1> .J       mov    ax, di
   225 0000020F 98                  <1>          cwde
   226 00000210 EB0B                <1>          jmp    .R
   227 00000212 5E                  <1> .Error:  pop    rsi
   228 00000213 B800000000          <1>          mov    rax, 0
   229 00000218 BB01000000          <1>          mov    rbx, 1
   230 0000021D 5F                  <1> .R       pop    rdi
   231 0000021E C3                  <1>          ret
